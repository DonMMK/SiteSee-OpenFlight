// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: com_parrot_mission_samples_hello.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}


/// Union of all possible commands of this package.
struct Parrot_Missions_Samples_Hello_Airsdk_Command {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Parrot_Missions_Samples_Hello_Airsdk_Command.OneOf_ID? = nil

  /// Ask to start/stop say hello (ground)
  var say: SwiftProtobuf.Google_Protobuf_Empty {
    get {
      if case .say(let v)? = id {return v}
      return SwiftProtobuf.Google_Protobuf_Empty()
    }
    set {id = .say(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_ID: Equatable {
    /// Ask to start/stop say hello (ground)
    case say(SwiftProtobuf.Google_Protobuf_Empty)

  #if !swift(>=4.1)
    static func ==(lhs: Parrot_Missions_Samples_Hello_Airsdk_Command.OneOf_ID, rhs: Parrot_Missions_Samples_Hello_Airsdk_Command.OneOf_ID) -> Bool {
      switch (lhs, rhs) {
      case (.say(let l), .say(let r)): return l == r
      }
    }
  #endif
  }

  init() {}
}

/// Union of all possible events of this package.
struct Parrot_Missions_Samples_Hello_Airsdk_Event {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Parrot_Missions_Samples_Hello_Airsdk_Event.OneOf_ID? = nil

  /// Count of hello (ground)
  var count: UInt32 {
    get {
      if case .count(let v)? = id {return v}
      return 0
    }
    set {id = .count(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_ID: Equatable {
    /// Count of hello (ground)
    case count(UInt32)

  #if !swift(>=4.1)
    static func ==(lhs: Parrot_Missions_Samples_Hello_Airsdk_Event.OneOf_ID, rhs: Parrot_Missions_Samples_Hello_Airsdk_Event.OneOf_ID) -> Bool {
      switch (lhs, rhs) {
      case (.count(let l), .count(let r)): return l == r
      }
    }
  #endif
  }

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "parrot.missions.samples.hello.airsdk"

extension Parrot_Missions_Samples_Hello_Airsdk_Command: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Command"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "say"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1:
        var v: SwiftProtobuf.Google_Protobuf_Empty?
        if let current = self.id {
          try decoder.handleConflictingOneOf()
          if case .say(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.id = .say(v)}
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if case .say(let v)? = self.id {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Parrot_Missions_Samples_Hello_Airsdk_Command, rhs: Parrot_Missions_Samples_Hello_Airsdk_Command) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Parrot_Missions_Samples_Hello_Airsdk_Event: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Event"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "count"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1:
        if self.id != nil {try decoder.handleConflictingOneOf()}
        var v: UInt32?
        try decoder.decodeSingularUInt32Field(value: &v)
        if let v = v {self.id = .count(v)}
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if case .count(let v)? = self.id {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Parrot_Missions_Samples_Hello_Airsdk_Event, rhs: Parrot_Missions_Samples_Hello_Airsdk_Event) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
